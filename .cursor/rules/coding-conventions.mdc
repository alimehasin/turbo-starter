---
description: 
globs: 
alwaysApply: false
---
# Coding Conventions and Patterns

## File and Directory Naming
- **kebab-case**: For directories and component files (e.g., `search-control`, `boolean-badge`)
- **PascalCase**: For React components and TypeScript interfaces
- **camelCase**: For functions, variables, and object properties
- **SCREAMING_SNAKE_CASE**: For constants and environment variables

## TypeScript Patterns

### Environment Variables
Use @t3-oss/env-* libraries for type-safe environment validation:
```typescript
// apps/backend/src/env.ts, apps/dashboard/src/env.ts, etc.
import { createEnv } from "@t3-oss/env-core";
```

### Validation Schemas
Use Zod for runtime type validation:
- Shared schemas in [packages/utils/src/schemas.ts](mdc:packages/utils/src/schemas.ts)
- App-specific schemas in respective `src/schemas/` directories

### Type Definitions
- Shared types in [packages/utils/src/types.ts](mdc:packages/utils/src/types.ts)
- App-specific types in respective `src/types.ts` files

## React Component Patterns

### Component Structure
```
components/
  component-name/
    index.ts          # Export barrel
    component-name.tsx # Main component
    styles.module.css  # Component styles (if needed)
```

### Export Pattern
Use barrel exports ([index.ts](mdc:apps/dashboard/src/components/shell/index.ts)) for clean imports:
```typescript
export { ComponentName } from './component-name';
```

### Hook Organization
Custom hooks in dedicated [hooks/](mdc:apps/dashboard/src/hooks) directory:
- [use-data-table.tsx](mdc:apps/dashboard/src/hooks/use-data-table.tsx): Table state management
- [use-modals.tsx](mdc:apps/dashboard/src/hooks/use-modals.tsx): Modal state management
- [use-notifications.ts](mdc:apps/dashboard/src/hooks/use-notifications.ts): Notification helpers

## Next.js App Router Patterns

### Route Organization
```
app/
  (dashboard)/          # Route groups for shared layouts
    layout.tsx         # Shared layout
    (home)/
      page.tsx         # Route page
  api/
    trpc/
      [trpc]/
        route.ts       # tRPC API handler
```

### Server Components vs Client Components
- Default to Server Components
- Use "use client" directive only when necessary
- Server actions in [server/actions/](mdc:apps/dashboard/src/server/actions) directory

## API Patterns (Backend)

### Elysia Plugin Structure
```typescript
// Consistent plugin pattern
export const pluginName = new Elysia({ name: 'plugin-name' })
  .use(dependencies)
  .get('/endpoint', handler)
```

### Route Organization
- Group related endpoints in single files
- Use consistent error handling patterns
- Implement proper validation with Zod

## Database Patterns

### Prisma Schema Conventions
- Use descriptive model names in PascalCase
- Include `createdAt` and `updatedAt` fields
- Use appropriate relationships and indexes

### Seed Data Organization
- Separate seed files by table/entity
- Use helper functions for consistent data generation
- Include realistic test data

## Styling Patterns

### Dashboard (Mantine)
- Use Mantine's theming system ([src/styles/theme/](mdc:apps/dashboard/src/styles/theme))
- CSS Modules for component-specific styles
- Global styles in [globals.css](mdc:apps/dashboard/src/styles/globals.css)

### Website (shadcn/ui)
- Tailwind CSS for styling
- Component variants using class-variance-authority
- Design tokens in CSS custom properties

## Internationalization Patterns
- Message keys in nested JSON structure
- Use namespace pattern for feature grouping
- Extract all user-facing strings for translation

## Error Handling
- Custom error classes in [utils/errors.ts](mdc:apps/backend/src/utils/errors.ts)
- Consistent error response formats
- Proper error boundaries in React components

## Import Organization
1. Node modules
2. Internal packages (workspace:*)
3. Relative imports (../,  ./)
4. Type-only imports last
