
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileType {
  Image
  Video
  Other
}

model User {
  id String @id @default(uuid())

  name                String
  email               String
  emailVerified       Boolean  @default(false)
  image               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  phoneNumber         String?
  phoneNumberVerified Boolean?

  sessions Session[]
  accounts Account[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  // Backrefs
  files File[]

  @@unique([email])
  @@unique([phoneNumber])
  @@map("user")
}

model Session {
  id String @id @default(uuid())

  token String

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id String @id @default(uuid())

  accountId  String
  providerId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken  String?
  refreshToken String?
  idToken      String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?

  scope    String?
  password String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Verification {
  id String @id @default(uuid())

  identifier String
  value      String
  expiresAt  DateTime

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("verification")
}

model File {
  id String @id @default(uuid())

  key      String   @unique
  size     Int
  type     FileType
  isPublic Boolean  @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
